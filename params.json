{"name":"Soriento","tagline":"Scala OrientDb object mapping library","body":"Soriento\r\n========\r\n\r\n[![Join the chat at https://gitter.im/dimparf/Soriento](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dimparf/Soriento?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Build Status](https://travis-ci.org/dimparf/Soriento.svg)](https://travis-ci.org/dimparf/Soriento)\r\n\r\n## Scala OrientDb object mapping library\r\n\r\nSoriento is an object-relational mapping framework from scala case classes to OrientDb ODocument.\r\n##News\r\n - Support LinkSet, LinkList annotated fields\r\n - ODocumentReader auto creation (thanks b0c1)\r\n - Async query support (thanks b0c1)\r\n \r\n##Note\r\nPlease use develop branch for development and master as production version of library.\r\n\r\n## Features\r\n\r\n - Creating/deleting OrientDb classes by case classes.\r\n - Transparent CRUD for documents represented as case classes.\r\n - Linked or Embedded definitions for case classes.\r\n - Support serialization/deserialization for case classes with @Embedded list/set of case classes.\r\n - Support OType mapping Scala => OrientDb OTypes.\r\n - Transactions support.\r\n - Query by SQL.\r\n \r\nSupported types:\r\n- Long, Double, Int, Float, Short, String, case classes: Embedded, EmbeddedList, EmbeddedSet, Link, LinkList, LinkSet\r\n\r\n##Coming soon\r\n- LinkMap.\r\n- EmbeddedMap.\r\n\r\n##Add to you project\r\n```scala\r\n lazy val youProject = Project(\"YouProject\", file(\".\"))\r\n  .settings(commonSettings: _*)\r\n  .dependsOn(sorientoProject)\r\n  \r\n lazy val sorientoProject = RootProject(uri(\"https://github.com/dimparf/Soriento.git#master\"))\r\n```\r\n\r\n##Usage\r\nSimple example:\r\n```scala\r\n  import com.emotioncity.soriento.Dsl._ // or extends Dsl trait\r\n  import com.emotioncity.soriento.ODocumentReader._\r\n\r\n  implicit val orientDb: ODatabaseDocumentTx = ???\r\n\r\n  case class Message(content: String)\r\n  \r\n  case class Blog(author: String, @Embedded message: Message) // or @Linked\r\n  \r\n  case class BlogWithEmbeddedMessages(author: String, @EmbeddedSet messages: List[Message])\r\n\r\n  //schema-full (use com.emotioncity.soriento.ODb trait) mode or without this lines - schema less\r\n  createOClass[Message] \r\n  createOClass[Blog]\r\n  createOClass[BlogWithEmbeddedMessages]\r\n  \r\n  val blog = Blog(\"Dim\", message = Message(\"Hi\")) //or without named params Blog(\"Dim\", Message(\"Hi))\r\n  val blogWithEmbeddedMessages = BlogWithEmbeddedMessages(\"John\", List(Message(\"Hi\"), Message(\"New blog note\")))\r\n  //ActiveRecord style\r\n  blog.save\r\n  blogWithEmbeddedMessages.save\r\n  \r\n  //..or\r\n  orientDb.save(blog)\r\n  \r\n  \r\n  val blogs: List[Blog] = db.queryBySql[Blog](\"select from blog\")\r\n  \r\n  //Save object graph (from test code, use scalatest)\r\n  val messageOne = LinkedMessage(\"This is my first message\")\r\n  val messageOneSaved = messageOne.save.as[LinkedMessage].get\r\n  val messageTwo = LinkedMessage(\"last\")\r\n  val messageTwoSaved = messageTwo.save.as[LinkedMessage].get\r\n  \r\n  //Warning: Soriento use immutable case classes,\r\n  //unsaved messages don't have id. Save your values and get saved object with id with as[T] method.\r\n  val blogWithLinkSetMessages = BlogWithLinkSetMessages(\"MyBlog\", Set(messageOneSaved, messageTwoSaved))\r\n  blogWithLinkSetMessages.save\r\n  \r\n  val extractedBlogsOpt = orientDb\r\n  .queryBySql[BlogWithLinkSetMessages](\"select from BlogWithLinkSetMessages where name = 'MyBlog'\").headOption\r\n    extractedBlogsOpt match {\r\n      case Some(extractedBlog) =>\r\n        inside(extractedBlog) { case BlogWithLinkSetMessages(name, messages) =>\r\n          name should equal(\"MyBlog\")\r\n          messages should have size 2\r\n          messages should contain(LinkedMessage(\"This is my first message\", messageOneId))\r\n          messages should contain(LinkedMessage(\"last\", messageTwoId))\r\n        }\r\n      case None => fail(\"Model not saved or retrieved\")\r\n    }\r\n  }\r\n    \r\n  deleteOClass[Message]\r\n  deleteOClass[Blog]\r\n  deleteOClass[BlogWithEmbeddedMessages]\r\n  deleteOClass[BlogWithLinkSetMessages]\r\n```\r\n\r\nYou can also create custom readers for models:\r\n```scala\r\n  object BlogWithEmbeddedMessages {\r\n    implicit object BlogWithEmbeddedMessagesReader extends ODocumentReader[BlogWithEmbeddedMessages] {\r\n       def read(oDocument: ODocument): BlogWithEmbeddedMessages = {\r\n          BlogWithEmbeddedMessages(\r\n            oDocument.get[String](\"author\").get,\r\n            oDocument.getAs[Message, List[Message]](\"message\").get\r\n          )\r\n       }\r\n     }\r\n  }\r\n  \r\n```\r\nand import it:\r\n```scala\r\nimport BlogWithEmbeddedMessages._\r\n\r\n```\r\n\r\nMore examples in test directory.\r\n\r\n## Testing\r\nTo run unit tests:\r\n\r\n    sbt test\r\n\r\n## Contributors\r\n* Dmitriy Parenskiy <https://github.com/dimparf>\r\n* Janos Haber <https://github.com/b0c1>\r\n\r\n## Contributing\r\n\r\nWelcome to contribute!\r\nYou can always post an issue or (even better) fork the project, implement your idea or fix the bug you have found and send a pull request. \r\nJust remember to test it when you are done. Here is how:\r\n\r\nRun sbt test to run and compile tests.\r\n    \r\n## License\r\nThis software is available under the [Apache License, Version 2.0](LICENSE).    \r\n","google":"UA-70696512-1","note":"Don't delete this file! It's used internally to help with page regeneration."}